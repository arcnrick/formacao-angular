*************************
Aula #100:
*************************
Nota importante!!!

Nesse projeto utilizamos uma API para a conversão de moedas, a https://fixer.io, que mudou a forma como acessamos os dados, portanto será necessário modificar a URL da API no código do serviço que será criado a seguir para que ela continue funcionando.

A nova API requer uma chave de acesso pessoal. Para facilitar a implementação eu criei uma pessoal e compartilharei com você, assim não haverá a necessidade de você criar a sua.

* Essa chave tem uma limitação que somente permite converter moeda de Euros (EUR) para outras moedas, então ao executar a aplicação, tenha certeza de selecionar no campo "De" sempre a moeda EUR, pois as demais não funcionarão por limitação da conta gratuita que eles disponibilizam.

** Caso você deseje utilizar essa API em outros projetos, peço que crie a sua própria chave de autenticação no website citado acima, pois essa também possui uma limitação de 1000 requisições mensais, que deverá ser compartilha somente aqui pelos alunos.

*** Caso a chave que demonstro nos vídeos não funcione por limites de utilização, tente utilizar a seguinte que criei com outro email: 0138904fb6412bdba3aafede67e6c015

A versão 13 do Angular também traz uma nova API para requisições HTTP, que é a HttpClient (introduzida no Angular 4), que veio para substituir a antiga Http.

A seguir segue o código completo do serviço atualizado para a versão 12 do Angular, assim como para a nova API do fixer.io.

Você pode acompanhar normalmente as duas próximas aulas sobre a criação do serviço, substituindo o código antigo pelo novo que segue abaixo:

    import { Injectable } from '@angular/core';
    // Importamos o HttpClient ao invés do Http para o Angular 7
    //import { Http } from '@angular/http';
    import { HttpClient } from '@angular/common/http';
    import { Observable } from 'rxjs/Observable';
    import { 
     Conversao,
     ConversaoResponse 
    } from '../models';
    @Injectable()
    export class ConversorService {
      // Nova url do fixer.io, que adiciona o parâmetro access_key, que é a chave de autenticação 
      //private readonly BASE_URL = "http://api.fixer.io/latest";
      private readonly BASE_URL = "http://data.fixer.io/api/latest?access_key=eba7130a5b2d720ce43eb5fcddd47cc3";
      constructor(private http: HttpClient) {}
      /**
       * Realiza a chamada para a API de conversão de moedas.
       *
       * @param Conversao conversao
       * @return Observable<ConversaoResponse>
       */
      converter(conversao: Conversao): Observable<any> {
      // Na linha abaixo altere a '?' por '&'
      let params = `&base=${conversao.moedaDe}&symbols=${conversao.moedaPara}`;
      return this.http
          .get(this.BASE_URL + params);
          // No Angular 6 as duas próximas linha não são mais necessárias
          //.map(response => response.json() as ConversaoResponse)
          //.catch(error => Observable.throw(error));
      }
      /**
       * Retorna a cotação para dado uma response.
       *
       * @param ConversaoResponse conversaoResponse
       * @param Conversao conversao
       * @return number
       */
      cotacaoPara(conversaoResponse: ConversaoResponse, 
     conversao: Conversao): number {
      if (conversaoResponse === undefined) {
      return 0;
      }
      return conversaoResponse.rates[conversao.moedaPara];
      }
      /**
       * Retorna a cotação de dado uma response.
       *
       * @param ConversaoResponse conversaoResponse
       * @param Conversao conversao
       * @return string
       */
      cotacaoDe(conversaoResponse: ConversaoResponse, 
     conversao: Conversao): string {
      if (conversaoResponse === undefined) {
      return '0';
      }
      return (1 / conversaoResponse.rates[conversao.moedaPara])
      .toFixed(4);
      }
      /**
       * Retorna a data da cotação dado uma response.
       *
       * @param ConversaoResponse conversaoResponse
       * @return string
       */
      dataCotacao(conversaoResponse: ConversaoResponse): string {
        if (conversaoResponse === undefined) {
          return '';
        }
        return conversaoResponse.date;
      }
    }

O HttpClient citado acima pertence a outro módulo no Angular 12, que deverá ser modificado também no arquivo 'app.module.ts', conforme código a seguir:

    import { BrowserModule } from '@angular/platform-browser';
    import { NgModule } from '@angular/core';
    import { FormsModule } from '@angular/forms';
    // Importe o módulo HttpClientModule ao invés de HttpModule
    //import { HttpModule } from '@angular/http';
    import { HttpClientModule } from '@angular/common/http';
    import { AppComponent } from './app.component';
    import { ConversorModule } from './conversor';
    @NgModule({
      declarations: [
        AppComponent
      ],
      imports: [
        BrowserModule,
        FormsModule,
        // Modifique aqui a importação do módulo também
        //HttpModule,
        HttpClientModule,
        ConversorModule
      ],
      providers: [],
      bootstrap: [AppComponent]
    })
    export class AppModule { }

Com isso você terá o serviço atualizado e funcionando.

